---
description: 
globs: 
alwaysApply: true
---
Next.js 프로젝트 폴더 구조 및 관심사 분리 규칙
1. app/
라우트(페이지)와 레이아웃, 1회성(특정 라우트 한정) 컴포넌트만 위치시킨다.

2. features/도메인/
도메인(기능)별로 관심사 분리(components, hooks, services, types, utils 등)를 한다.
도메인별로만 사용되는 컴포넌트/로직/타입/유틸은 반드시 features/도메인/ 하위에 둔다.

3. components/
여러 도메인/페이지에서 재사용되는 공통 UI 컴포넌트만 위치시킨다.
예시: Button, Modal, Spinner, ErrorBoundary 등

4. lib/
외부 서비스 연동, 유틸리티, API 등 전역적으로 사용되는 함수/설정만 위치시킨다.
예시: firebase.ts, api.ts

5. store/
전역 상태 관리(zustand, recoil 등) 관련 파일만 위치시킨다.

6. types/
여러 도메인에서 공통으로 사용하는 타입만 위치시킨다.
도메인 전용 타입은 features/도메인/types/에 둔다.

7. import 규칙
app/ 하위에서는 반드시 features/도메인/ 또는 components/에서 필요한 컴포넌트/로직만 import해서 사용한다.
features/도메인/ 하위에서는 다른 도메인의 내부 파일을 직접 import하지 않는다(공통이 필요하면 components/나 lib/로 승격).

8. 기타
폴더/파일 네이밍은 소문자+카멜케이스를 원칙으로 한다.
폴더 구조가 깊어질 경우, 도메인별로만 깊게 들어가고, 공통은 최대한 얕게 유지한다.

9. 파일 네이밍 규칙
새로운 파일을 생성할 때, 파일 이름만 보고도 해당 파일의 역할과 주요 기능을 직관적으로 알 수 있도록 명확하고 구체적으로 네이밍한다.

코드 규칙
1. 주석 작성 규칙
   - 모든 주석은 한국어로 작성합니다
   - 복잡한 로직이나 중요한 비즈니스 로직에는 상세한 설명을 추가합니다
   - TODO, FIXME 등의 태그를 사용할 때도 한국어로 작성합니다

2. UI/UX 텍스트 규칙
   - 모든 UI 텍스트는 영어로 작성합니다
   - 에러 메시지, 알림, 버튼 텍스트 등 사용자에게 보여지는 모든 텍스트는 영어로 작성합니다
   - 다국어 지원이 필요한 경우 i18n을 사용하여 관리합니다

3. 코드 스타일 규칙
   - 변수명, 함수명, 클래스명은 영어로 작성합니다
   - 의미가 명확한 이름을 사용합니다
   - 일관된 네이밍 컨벤션을 따릅니다 (camelCase, PascalCase 등)


# 프로젝트 디렉터리 구조

1. **app/**  
   - 라우트(페이지)와 레이아웃, 1회성 컴포넌트만 위치시킵니다.

2. **features/{도메인}/**  
   - 도메인별로 관심사를 분리(`components/`, `hooks/`, `services/`, `types/`, `utils/` 등).  
   - 해당 도메인 전용 컴포넌트·로직·타입·유틸은 반드시 이 폴더 하위에 위치시킵니다.

3. **components/**  
   - 여러 도메인·페이지에서 재사용되는 공통 UI 컴포넌트만 위치시킵니다.

4. **lib/**  
   - 외부 서비스 연동, 전역 유틸리티, API 호출 함수 등 전역 공통 로직만 위치시킵니다.

5. **store/**  
   - 전역 상태 관리(zustand, recoil 등) 관련 파일만 위치시킵니다.

6. **types/**  
   - 여러 도메인에서 공통으로 사용하는 타입만 위치시킵니다.  
   - 도메인 전용 타입은 **features/{도메인}/types/**에 둡니다.

---

# Import 규칙

- **app/** 하위에서는 `features/{도메인}/` 또는 `components/`에서 필요한 리소스만 import합니다.  
- **features/A/** 하위에서 **features/B/** 내부 파일을 직접 참조하지 않습니다.  
  - 공통으로 쓰여야 할 로직은 `features/shared` 또는 `components/`, `lib/`로 분리하세요.

---

# 네이밍 & 파일 위치 규칙

- 폴더·파일 네이밍: 소문자 + camelCase  
- 도메인 전용 타입 → `features/{도메인}/types/`  
- 공통 타입 → `types/`

---

# 코드 스타일 & 주석 규칙

1. **라인 브레이크 & 들여쓰기**  
   - 함수, 조건문, fetch 호출, 객체 리터럴 등 가독성을 위해 적절히 줄바꿈과 들여쓰기를 적용합니다.

2. **주석**  
   - 모든 주석은 한국어로 작성합니다.  
   - 복잡하거나 핵심 비즈니스 로직에는 상세 설명을 추가합니다.  
   - **TODO**, **FIXME** 태그도 한국어로 작성합니다.

3. **UI/UX 텍스트**  
   - 사용자에게 보여지는 모든 UI 텍스트(버튼, 알림, 에러 메시지 등)는 영어로 작성합니다.  
   - 다국어 지원이 필요하면 i18n을 사용해 관리합니다.

4. **네이밍 컨벤션**  
   - 변수명, 함수명, 클래스명은 영어로 작성하고 의미를 명확히 합니다.  
   - camelCase, PascalCase 등 일관된 방식을 사용합니다.

---

# 기타 지침

- 폴더 구조가 깊어진다면, 도메인 폴더만 내부가 깊어지고 공통 폴더는 최대한 얕게 유지합니다.  
- 파일 이름만 보고 역할과 기능이 직관적으로 파악되도록 구체적으로 명명합니다.
- 프로젝트는 nextjs 폴더에서만 진행됩니다. (frontend 폴더는 사용하지 않습니다. 더 이상 진행하지 않습니다)
